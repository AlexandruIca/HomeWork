<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhw_1_1window" kind="class" language="C++" prot="public">
    <compoundname>hw::window</compoundname>
    <includes refid="window_8hpp" local="no">window.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhw_1_1window_1a92cfc93cbacd56ab13482d6a2d4c0ae0" prot="private" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* hw::window::m_window</definition>
        <argsstring></argsstring>
        <name>m_window</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="27" column="1" bodyfile="include/window.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhw_1_1window_1a5b48121ba049946b21056b38056e064f" prot="private" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* hw::window::m_renderer</definition>
        <argsstring></argsstring>
        <name>m_renderer</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="28" column="1" bodyfile="include/window.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhw_1_1window_1a9e79d0dc33bf4424b608ee518528bb0c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int hw::window::m_width</definition>
        <argsstring></argsstring>
        <name>m_width</name>
        <initializer>{-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="30" column="1" bodyfile="include/window.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhw_1_1window_1a2aef9765ff9f0e049c678d9815ea8b3a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int hw::window::m_height</definition>
        <argsstring></argsstring>
        <name>m_height</name>
        <initializer>{-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="31" column="1" bodyfile="include/window.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhw_1_1window_1a05be32feddc5e5b0bd5d74d4660d219d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; SDL_Event &gt;</type>
        <definition>std::vector&lt;SDL_Event&gt; hw::window::m_event_queue</definition>
        <argsstring></argsstring>
        <name>m_event_queue</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="33" column="1" bodyfile="include/window.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhw_1_1window_1aefd2b7aa6faa3373ce94037e4d07993f" prot="private" static="no" mutable="no">
        <type><ref refid="structhw_1_1color" kindref="compound">hw::color</ref></type>
        <definition>hw::color hw::window::m_color</definition>
        <argsstring></argsstring>
        <name>m_color</name>
        <initializer>{0, 0, 0, 155}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="35" column="1" bodyfile="include/window.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhw_1_1window_1a4ba3af91d8b9ed883467cdc7593b74ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hw::window::window</definition>
        <argsstring>()=default</argsstring>
        <name>window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a762764c6be092da20087eeabcd59f6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hw::window::window</definition>
        <argsstring>(const int t_width, const int t_height, const char *t_name)</argsstring>
        <name>window</name>
        <param>
          <type>const int</type>
          <declname>t_width</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>t_height</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Constructs the window with given dimensions and title. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>is the title of the window. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="44" column="1" bodyfile="src/window.cpp" bodystart="9" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a1b161da1b6866a481ca0e6c306a0d7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hw::window::~window</definition>
        <argsstring>()</argsstring>
        <name>~window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="45" column="1" bodyfile="src/window.cpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1afc619520ac96f4c25af16ba3c55b46e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int hw::window::get_width</definition>
        <argsstring>() const</argsstring>
        <name>get_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="47" column="1" bodyfile="include/window.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a33ad0df5b3b46f9d579480760c75ebe0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int hw::window::get_height</definition>
        <argsstring>() const</argsstring>
        <name>get_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="52" column="1" bodyfile="include/window.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a5e559ebcf31281c34e5d5c7287b6deca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* hw::window::get_renderer</definition>
        <argsstring>()</argsstring>
        <name>get_renderer</name>
        <briefdescription>
<para>Returns the underlying renderer(used by SDL). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="60" column="1" bodyfile="include/window.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1acb5ff0ac3e5b8bbef83b966729e849ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SDL_Window *</type>
        <definition>SDL_Window* hw::window::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns the underlying window(used by SDL). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="67" column="1" bodyfile="include/window.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a997bc40019b3f1c9a5c6474b71674afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hw::window::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
<para>Renders everything on the screen. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="75" column="1" bodyfile="src/window.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1aa3fcbe401b44a0098711e54bc17a0de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hw::window::handle_events</definition>
        <argsstring>()</argsstring>
        <name>handle_events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="76" column="1" bodyfile="src/window.cpp" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a90dc572e29ff0ee9c12b4bb78ee3d6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hw::window::set_bgcolor</definition>
        <argsstring>(const std::uint8_t t_r, const std::uint8_t t_g, const std::uint8_t t_b, const std::uint8_t t_a=255)</argsstring>
        <name>set_bgcolor</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>t_r</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>t_g</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>t_b</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>t_a</declname>
          <defval>255</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="77" column="1" bodyfile="src/window.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1ae8e16d8c766889e7830e48845f5011d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hw::window::set_bgcolor</definition>
        <argsstring>(const hw::color &amp;t_color)</argsstring>
        <name>set_bgcolor</name>
        <param>
          <type>const <ref refid="structhw_1_1color" kindref="compound">hw::color</ref> &amp;</type>
          <declname>t_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="79" column="1" bodyfile="src/window.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a08d4b8573fdc679868a6f202136f4832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hw::window::set_bgcolor</definition>
        <argsstring>(hw::color &amp;&amp;t_color)</argsstring>
        <name>set_bgcolor</name>
        <param>
          <type><ref refid="structhw_1_1color" kindref="compound">hw::color</ref> &amp;&amp;</type>
          <declname>t_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="80" column="1" bodyfile="src/window.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1ad2c969819096a038667fa6bd970593f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hw::window::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="81" column="1" bodyfile="src/window.cpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a1004fcf6e277ff1ca2d6dcb2c93d4649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hw::window::was_key_pressed</definition>
        <argsstring>(int t_key)</argsstring>
        <name>was_key_pressed</name>
        <param>
          <type>int</type>
          <declname>t_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="83" column="1" bodyfile="src/window.cpp" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhw_1_1window_1a35c3f456f69df2db1f9bee20ef194cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hw::window::closed</definition>
        <argsstring>()</argsstring>
        <name>closed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/window.hpp" line="84" column="1" bodyfile="src/window.cpp" bodystart="100" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Window object that can (obviously) create a window, set the clear color, update it and get what key was pressed. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/window.hpp" line="25" column="1" bodyfile="include/window.hpp" bodystart="24" bodyend="85"/>
    <listofallmembers>
      <member refid="classhw_1_1window_1ad2c969819096a038667fa6bd970593f5" prot="public" virt="non-virtual"><scope>hw::window</scope><name>clear</name></member>
      <member refid="classhw_1_1window_1a35c3f456f69df2db1f9bee20ef194cd9" prot="public" virt="non-virtual"><scope>hw::window</scope><name>closed</name></member>
      <member refid="classhw_1_1window_1acb5ff0ac3e5b8bbef83b966729e849ae" prot="public" virt="non-virtual"><scope>hw::window</scope><name>get</name></member>
      <member refid="classhw_1_1window_1a33ad0df5b3b46f9d579480760c75ebe0" prot="public" virt="non-virtual"><scope>hw::window</scope><name>get_height</name></member>
      <member refid="classhw_1_1window_1a5e559ebcf31281c34e5d5c7287b6deca" prot="public" virt="non-virtual"><scope>hw::window</scope><name>get_renderer</name></member>
      <member refid="classhw_1_1window_1afc619520ac96f4c25af16ba3c55b46e8" prot="public" virt="non-virtual"><scope>hw::window</scope><name>get_width</name></member>
      <member refid="classhw_1_1window_1aa3fcbe401b44a0098711e54bc17a0de3" prot="public" virt="non-virtual"><scope>hw::window</scope><name>handle_events</name></member>
      <member refid="classhw_1_1window_1aefd2b7aa6faa3373ce94037e4d07993f" prot="private" virt="non-virtual"><scope>hw::window</scope><name>m_color</name></member>
      <member refid="classhw_1_1window_1a05be32feddc5e5b0bd5d74d4660d219d" prot="private" virt="non-virtual"><scope>hw::window</scope><name>m_event_queue</name></member>
      <member refid="classhw_1_1window_1a2aef9765ff9f0e049c678d9815ea8b3a" prot="private" virt="non-virtual"><scope>hw::window</scope><name>m_height</name></member>
      <member refid="classhw_1_1window_1a5b48121ba049946b21056b38056e064f" prot="private" virt="non-virtual"><scope>hw::window</scope><name>m_renderer</name></member>
      <member refid="classhw_1_1window_1a9e79d0dc33bf4424b608ee518528bb0c" prot="private" virt="non-virtual"><scope>hw::window</scope><name>m_width</name></member>
      <member refid="classhw_1_1window_1a92cfc93cbacd56ab13482d6a2d4c0ae0" prot="private" virt="non-virtual"><scope>hw::window</scope><name>m_window</name></member>
      <member refid="classhw_1_1window_1a90dc572e29ff0ee9c12b4bb78ee3d6f7" prot="public" virt="non-virtual"><scope>hw::window</scope><name>set_bgcolor</name></member>
      <member refid="classhw_1_1window_1ae8e16d8c766889e7830e48845f5011d7" prot="public" virt="non-virtual"><scope>hw::window</scope><name>set_bgcolor</name></member>
      <member refid="classhw_1_1window_1a08d4b8573fdc679868a6f202136f4832" prot="public" virt="non-virtual"><scope>hw::window</scope><name>set_bgcolor</name></member>
      <member refid="classhw_1_1window_1a997bc40019b3f1c9a5c6474b71674afa" prot="public" virt="non-virtual"><scope>hw::window</scope><name>update</name></member>
      <member refid="classhw_1_1window_1a1004fcf6e277ff1ca2d6dcb2c93d4649" prot="public" virt="non-virtual"><scope>hw::window</scope><name>was_key_pressed</name></member>
      <member refid="classhw_1_1window_1a4ba3af91d8b9ed883467cdc7593b74ed" prot="public" virt="non-virtual"><scope>hw::window</scope><name>window</name></member>
      <member refid="classhw_1_1window_1a762764c6be092da20087eeabcd59f6f6" prot="public" virt="non-virtual"><scope>hw::window</scope><name>window</name></member>
      <member refid="classhw_1_1window_1a1b161da1b6866a481ca0e6c306a0d7b6" prot="public" virt="non-virtual"><scope>hw::window</scope><name>~window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
